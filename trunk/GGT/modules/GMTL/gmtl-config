#!/usr/bin/env python

# ************************************************************* ggt-head beg
#
# GGT: Generic Graphics Toolkit
#
# Original Authors:
#   Allen Bierbaum
#
# -----------------------------------------------------------------
# File:          $RCSfile: gmtl-config,v $
# Date modified: $Date: 2007-06-13 15:09:19 $
# Version:       $Revision: 1.1 $
# -----------------------------------------------------------------
#
# ********************************************************** ggt-head end
# ************************************************************** ggt-cpr beg
# 
# GGT: The Generic Graphics Toolkit
# Copyright (C) 2001,2002 Allen Bierbaum
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
# *********************************************************** ggt-cpr end

import os, sys
from optparse import OptionParser

parser = OptionParser(usage = "%prog [OPTIONS]",
                      description = "GMTL config option processor.")

parser.add_option("--prefix", action = "store_true",
                  help = "Print the installation prefix.")
parser.add_option("--version", action = "store_true",
                  help = "Print the installed GMTL's version number.")
parser.add_option("--cxxflags", action = "store_true",
                  help = "Pring the GMTL-specific flags for the C++ compiler.")
parser.add_option("--all", action = "store_true",
                  help = "Print all the flags used for compiling or linking.")
parser.add_option("--basedir", action = "store_true",
                  help = "For compatibility. (disabled in this wrapper)")

(options, pos_args) = parser.parse_args()

if 0 != len(pos_args):
   parser.print_help()

# Build up flags for flagpoll
command_flags = " gmtl --concat"

if options.prefix:
   command_flags += " --get-prefix"
elif options.version:
   command_flags += " --modversion"
elif options.cxxflags or options.libs:
   if options.cxxflags:
      command_flags += " --cflags"
   if options.libs:
      command_flags += " --libs"
   if not options.all:
      command_flags += " --no-deps"
else:
   parser.print_help()
   sys.exit(1)      
   
command_line = "flagpoll " + command_flags

#print "Command: ", command_line
os.system(command_line)
