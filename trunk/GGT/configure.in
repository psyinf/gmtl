dnl # -------------------------------------------------------------------------
dnl # Process this file with autoconf to produce a configure script.
dnl # -------------------------------------------------------------------------

AC_REVISION($Revision: 1.1.1.1 $)
AC_INIT(gfxConfig.h)
AC_CONFIG_HEADER(gfx_defines.h)

builtin(include, config/dos.m4)

dnl # -------------------------------------------------------------------------
dnl # Command-line arguments (--enable-option, --with-pkg=package_name).
dnl # -------------------------------------------------------------------------

dnl # -------------------------------------------- #
dnl # --with-pkg[=arg] and --without-pkg arguments #
dnl # -------------------------------------------- #

dnl #
AC_ARG_WITH(std,
            [  --with-std              Use the std namespace           [default=yes]],
            _std="$withval", _std='yes')

dnl #
AC_ARG_WITH(orb,
            [  --with-orb=<PATH>       Set the path to the CORBA 2.3
                          implementation],
            ORB_ROOT="$withval")

dnl #
AC_ARG_WITH(orb-lib,
            [  --with-orb-lib=<NAME>   Set the name of the ORB library [default=OB]],
            _orb_lib_name="$withval", _orb_lib_name='OB')

dnl #
AC_ARG_WITH(orb-jar,
            [  --with-orb-jar=<PATH>   Set the path to the ORB Java
                          JAR file                        [default=
                                                           <ORB>/lib/OB.jar]],
            _orb_jar_path="$withval", _orb_jar_path="$ORB_ROOT/lib/${_orb_lib_name}.jar")

dnl #
AC_ARG_WITH(jtc,
            [  --with-jtc=<PATH>       Make use of JThreads/C++        [default=no]],
            JTC_ROOT="$withval", JTC_ROOT='no')

builtin(include, config/abi.m4)
builtin(include, config/sys_init.m4)
builtin(include, config/compiler_init.m4)
builtin(include, config/basic_progs.m4)
builtin(include, config/java.m4)
builtin(include, config/install.m4)

if test "x${_orb_jar_path}" != "xno" ; then
    ORB_JAR="${_orb_jar_path}"
fi

dnl # -------------------------------------------------------------------------
dnl # System-dependent settings.
dnl # -------------------------------------------------------------------------

dnl # The OS for which this is being configured.  The operating systems are
dnl # listed alphabetically.  $target_os is guaranteed to be set by the
dnl # inclusion of config/sys.m4.
case $target_os in
    dnl # i386-class machine running Windows {98,NT} with Cygnus GNU-Win32.
    cygwin)
        AC_DEFINE(BSYS_OS_Win32,)
        ;;
    dnl # A machine running FreeBSD.  Currently only i386 is known to compile.
    freebsd*)
        AC_DEFINE(BSYS_OS_FreeBSD,)
        ;;
    dnl # A machine running IRIX 6.x.
    irix6*)
        AC_DEFINE(BSYS_OS_IRIX,)
        ;;
    dnl # A machine running Linux.  Currently only i386 is known to work.
    linux*)
        AC_DEFINE(BSYS_OS_Linux,)
        ;;
esac

dnl # -------------------------------------------------------------------------
dnl # Checks for programs.
dnl # -------------------------------------------------------------------------
dnl # Find the IDL compiler.
AC_PATH_PROG(IDL, idl, AC_MSG_ERROR(*** IDL compiler required ***),
             "$PATH:$ORB_ROOT/bin")
AC_PATH_PROG(JIDL, jidl, AC_MSG_ERROR(*** Java IDL compiler required ***),
             "$PATH:$ORB_ROOT/bin")

dnl # -------------------------------------------------------------------------
dnl # Checks for libraries.
dnl # -------------------------------------------------------------------------
builtin(include, config/pthreads_init.m4)
builtin(include, config/nspr.m4)

AC_LANG_SAVE
AC_LANG_CPLUSPLUS

_dso_save_CXXFLAGS="$CXXFLAGS"
CXXFLAGS="$CXXFLAGS -I$ORB_ROOT/include"

AC_CACHE_CHECK(for CORBA::ORB_init in -l${_orb_lib_name},
    ac_cv_CORBA_init_in_orb_lib,
    AC_TRY_COMPILE([#include <OB/CORBA.h> ],
                   [ int argc; char** argv; CORBA::ORB_init(argc, argv); ],
                   [ ac_cv_CORBA_init_in_orb_lib='yes' ; rm -rf ./ii_files ],
                   [ ac_cv_CORBA_init_in_orb_lib='no' ;
                     AC_MSG_WARN(*** ORB library not found ***) ]))

CXXFLAGS="${_dso_save_CXXFLAGS}"

if test "x$JTC_ROOT" != "xno" ; then
    _dso_save_CXXFLAGS="$CXXFLAGS"
    CXXFLAGS="$CXXFLAGS -I$JTC_ROOT/include"

    AC_CACHE_CHECK(for JTCThread::yield in -lJTC,
        ac_cv_JTCThread_yield_in_JTC,
        AC_TRY_COMPILE([#include <JTC/JTC.h> ],
                       [ JTCThread::yield(); ],
                       [ ac_cv_JTCThread_yield_in_JTC='yes' ;
                         rm -rf ./ii_files ],
                       [ ac_cv_JTCThread_yield_in_JTC='no' ;
                         AC_MSG_WARN(*** JTC library not found ***) ]))

    CXXFLAGS="${_dso_save_CXXFLAGS}"
    _include_JTC_ROOT='-I$(JTC_ROOT)/include'
else
    _include_JTC_ROOT=''
fi

AC_LANG_RESTORE

_ldflags_NSPR_ROOT='-L$(NSPR_ROOT)/lib'

dnl # -------------------------------------------------------------------------
dnl # Checks for header files.
dnl # -------------------------------------------------------------------------
AC_HEADER_STDC

dnl # We assume that the include path for the ORB is correct if execution has
dnl # reached this point.
_include_ORB_ROOT='-I$(ORB_ROOT)/include'
_include_NSPR_ROOT='-I$(NSPR_ROOT)/include'

dnl # -------------------------------------------------------------------------
dnl # Checks for typedefs, structures, and compiler characteristics.
dnl # -------------------------------------------------------------------------
AC_TYPE_SIZE_T

dnl # -------------------------------------------------------------------------
dnl # Miscellaneous checks.
dnl # -------------------------------------------------------------------------

dnl # -------------------------------------------------------------------------
dnl # Do Makefile substitutions.
dnl # -------------------------------------------------------------------------

builtin(include, config/sys_end.m4)
builtin(include, config/pthreads_end.m4)

if test "$ac_cv_CORBA_init_in_orb_lib" = "yes" ; then
    _ldflags_ORB_ROOT='-L$(ORB_ROOT)/lib'
    LIBS="$LIBS -l${_orb_lib_name}"
else
    _ldflags_ORB_ROOT=''
fi

if test "$ac_cv_JTCThread_yield_in_JTC" = "yes" ; then
    _ldflags_JTC_ROOT='-L$(JTC_ROOT)/lib'
    LIBS="$LIBS -lJTC"
else
    _ldflags_JTC_ROOT=''
fi

INCLUDES="$INCLUDES ${_include_ORB_ROOT} ${_include_JTC_ROOT} ${_include_NSPR_ROOT}"
LDFLAGS="$LDFLAGS ${_ldflags_ORB_ROOT} ${_ldflags_JTC_ROOT} ${_ldflags_NSPR_ROOT}"
LIBS="$LIBS -lnspr$NSPR_VER -lplc$NSPR_VER"
SYS_LIBS="${_pthread_lib}"

dnl # $srcdir is the root directory of the juggler source tree.  To get a
dnl # value for $BSYS_SRC_ROOT_ABS, we cd there and save the value of running pwd.
dnl # Then return to the directory where configure is being run ($topdir).
topdir=`pwd`
cd "$srcdir"
BSYS_SRC_ROOT_ABS=`pwd`
cd "$topdir"

dnl # Define the base path to the source directory using ${BSYS_SRC_ROOT_ABS} as an
dnl # alternative to using ${srcdir}.
BSYS_SRCDIR='$(BSYS_SRC_ROOT_ABS)'
UNIX_BSYS_SRC_ROOT_ABS="$BSYS_SRC_ROOT_ABS"

dnl # Translate paths from UNIX-style to Win32.
if test "$OS_TYPE" = "Win32" ; then
    topdir=`unix2dos "$topdir"`
    SAFE_BSYS_SRC_ROOT_ABS=`unix2dos "$BSYS_SRC_ROOT_ABS"`
    BSYS_SRCDIR=`unix2dos "$BSYS_SRCDIR"`

    DEPEND_EXTRAS=`unix2dos "$DEPEND_EXTRAS"`
    INCLUDES=`unix2dos "$INCLUDES"`
    LIBS=`unix2dos "$LIBS"`
else
    SAFE_BSYS_SRC_ROOT_ABS="$BSYS_SRC_ROOT_ABS"
fi

if test "$OS_TYPE" != "Win32" ; then
    if test "x$JTC_ROOT" != "xno" ; then
        JTC_LIB_STATIC='$(JTC_ROOT)/lib/libJTC.a'
    else
        JTC_LIB_STATIC=''
    fi

    ORB_LIB_STATIC="\$(ORB_ROOT)/lib/lib${_orb_lib_name}.a"
fi

AC_SUBST(topdir)
AC_SUBST(UNIX_BSYS_SRC_ROOT_ABS)
AC_SUBST(SAFE_BSYS_SRC_ROOT_ABS)
AC_SUBST(BSYS_SRCDIR)

AC_SUBST(IDL)
AC_SUBST(JTC_ROOT)
AC_SUBST(JTC_LIB_STATIC)
AC_SUBST(ORB_JAR)
AC_SUBST(ORB_ROOT)
AC_SUBST(ORB_LIB_STATIC)
AC_SUBST(SYS_LIBS)

dnl # -------------------------------------------------------------------------
dnl # Final file generation step.
dnl # -------------------------------------------------------------------------
AC_OUTPUT( Makefile \
           Makefile.inc \
		   make.defs.mk \
		   GMTL/Makefile \
		   GMTL/Fit/Makefile \
		   GMTL/Numerics/Makefile \
		   SGA/Makefile \
		   Threads/Makefile \
		   Test/Makefile \
		   Test/TestSuite/Makefile \
		   )
